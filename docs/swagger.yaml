basePath: /api/v1/
definitions:
  lib.Page:
    properties:
      first:
        description: indicate first value
        example: true
        type: boolean
      items:
        type: object
      last:
        description: indicate last value
        example: false
        type: boolean
      max_page:
        description: maximum pages for current schema
        example: 9
        type: integer
      page:
        description: current page, start from zero
        example: 0
        type: integer
      size:
        description: size per page, default `10`
        example: 10
        type: integer
      total:
        description: total data without filters
        example: 100
        type: integer
      total_pages:
        description: total pages
        example: 10
        type: integer
      visible:
        description: current length
        example: 10
        type: integer
    type: object
  lib.Response:
    properties:
      message:
        description: response message
        type: string
      status:
        description: http status
        type: integer
    type: object
  model.Asset:
    properties:
      absolute_path:
        description: AbsolutePath
        example: image.png
        type: string
      creator_id:
        description: creator id
        format: uuid
        type: string
      description:
        description: Description
        example: string
        type: string
      file_path:
        description: File Path
        type: string
      file_size:
        description: File Size
        format: float
        type: number
      filename:
        description: Filename
        example: image.png
        type: string
      modifier_id:
        description: modifier id
        format: uuid
        type: string
      original_filename:
        description: OriginalFilename
        example: image.png
        type: string
      relative_path:
        description: RelativePath
        example: image.png
        type: string
      title:
        description: Title
        example: Image
        type: string
    type: object
  model.Brand:
    properties:
      brand_code:
        example: XM
        type: string
      brand_name:
        example: Iphone
        type: string
    required:
    - brand_code
    - brand_name
    type: object
  model.BrandAPI:
    properties:
      brand_code:
        example: XM
        type: string
      brand_name:
        example: Iphone
        type: string
    required:
    - brand_code
    - brand_name
    type: object
  model.Cart:
    properties:
      customer:
        $ref: '#/definitions/model.Customer'
      customer_id:
        format: uuid
        type: string
      product:
        $ref: '#/definitions/model.Product'
      product_id:
        format: uuid
        type: string
      qty:
        type: integer
    type: object
  model.CartRequest:
    properties:
      customer_id:
        format: uuid
        type: string
      product_id:
        format: uuid
        type: string
      qty:
        type: integer
    type: object
  model.CartUpdate:
    properties:
      qty:
        type: integer
    type: object
  model.Category:
    properties:
      category_code:
        example: HP
        type: string
      category_name:
        example: Handphone
        type: string
    required:
    - category_code
    - category_name
    type: object
  model.CategoryAPI:
    properties:
      category_code:
        example: HP
        type: string
      category_name:
        example: Handphone
        type: string
    required:
    - category_code
    - category_name
    type: object
  model.Customer:
    properties:
      address:
        description: Address
        example: Jl. Aria Putra No.88, RT.09/RW.01, Sawah Baru, Kec. Ciputat, Kota
          Tangerang Selatan, Banten 15414
        type: string
      alternate_number:
        description: Alternate Number
        example: "08123456789"
        type: string
      city_id:
        description: City ID
        format: uuid
        type: string
      creator_id:
        description: creator id
        format: uuid
        type: string
      customer_name:
        description: customer Name                                                                                //
          Type
        example: Walk-in-customers
        type: string
      email:
        description: Email
        example: walk-in-customer@mail.com
        type: string
      mobile:
        description: Mobile
        example: "08123456789"
        type: string
      modifier_id:
        description: modifier id
        format: uuid
        type: string
      province_id:
        description: Province ID
        format: uuid
        type: string
      subdistrict_id:
        description: Subdistrict ID
        format: uuid
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        format: uuid
        type: string
      website:
        description: Website
        example: www.walk-in-customer.com
        type: string
      zip_code:
        description: Zip Code
        example: "15414"
        type: string
    required:
    - customer_name
    type: object
  model.CustomerAPI:
    properties:
      address:
        description: Address
        example: Jl. Aria Putra No.88, RT.09/RW.01, Sawah Baru, Kec. Ciputat, Kota
          Tangerang Selatan, Banten 15414
        type: string
      alternate_number:
        description: Alternate Number
        example: "08123456789"
        type: string
      city_id:
        description: City ID
        format: uuid
        type: string
      customer_name:
        description: customer Name                                                                                //
          Type
        example: Walk-in-customers
        type: string
      email:
        description: Email
        example: walk-in-customer@mail.com
        type: string
      mobile:
        description: Mobile
        example: "08123456789"
        type: string
      province_id:
        description: Province ID
        format: uuid
        type: string
      subdistrict_id:
        description: Subdistrict ID
        format: uuid
        type: string
      user_id:
        format: uuid
        type: string
      website:
        description: Website
        example: www.walk-in-customer.com
        type: string
      zip_code:
        description: Zip Code
        example: "15414"
        type: string
    required:
    - customer_name
    type: object
  model.LoginAPI:
    properties:
      password:
        example: '@Password123'
        type: string
      remember:
        example: true
        type: boolean
      username:
        example: john.doe@mail.com
        type: string
    required:
    - password
    - username
    type: object
  model.PaymentLinkResponse:
    properties:
      checkout_link:
        example: https://checkout-staging.xendit.co/latest/65a0eaaa63346762f641c28a
        type: string
    type: object
  model.Product:
    properties:
      brand:
        $ref: '#/definitions/model.Brand'
      brand_id:
        format: uuid
        type: string
      category:
        $ref: '#/definitions/model.Category'
      category_id:
        format: uuid
        type: string
      description:
        example: Samsung Desc
        type: string
      price:
        example: 10000
        type: number
      product_asset:
        $ref: '#/definitions/model.ProductAsset'
      product_name:
        example: Samsung
        type: string
      quantity:
        example: 10
        type: integer
      sku:
        example: PR6900000007
        type: string
    required:
    - description
    - product_name
    type: object
  model.ProductAPI:
    properties:
      brand_id:
        format: uuid
        type: string
      category_id:
        format: uuid
        type: string
      description:
        example: Samsung Desc
        type: string
      price:
        example: 10000
        type: number
      product_name:
        example: Samsung
        type: string
      quantity:
        example: 10
        type: integer
      sku:
        example: PR6900000007
        type: string
    required:
    - description
    - product_name
    type: object
  model.ProductAsset:
    properties:
      file_name:
        type: string
      file_path:
        type: string
      is_primary:
        type: boolean
      product_id:
        format: uuid
        type: string
    type: object
  model.ProductRequest:
    properties:
      brand_id:
        format: uuid
        type: string
      category_id:
        format: uuid
        type: string
      description:
        example: Samsung Desc
        type: string
      price:
        example: 10000
        type: number
      product_asset:
        items:
          $ref: '#/definitions/model.ProductAsset'
        type: array
      product_name:
        example: Samsung
        type: string
      quantity:
        example: 10
        type: integer
    required:
    - description
    - product_name
    type: object
  model.RegistrationAPI:
    properties:
      confirm_password:
        example: '@Password123'
        type: string
      email:
        example: john.doe@mail.com
        type: string
      fullname:
        example: John doe
        type: string
      password:
        example: '@Password123'
        minLength: 8
        type: string
      referral_code:
        example: E6So5no5
        type: string
    required:
    - confirm_password
    - email
    - fullname
    - password
    type: object
  model.SendVerificationAccountAPI:
    properties:
      email:
        example: john.doe@mail.com
        type: string
    required:
    - email
    type: object
  model.Transaction:
    properties:
      customer:
        $ref: '#/definitions/model.Customer'
      customer_id:
        format: uuid
        type: string
      invoice_no:
        example: INV-000000000000072270623
        type: string
      total_amount:
        example: 127000
        type: number
      transaction_date:
        format: date-time
        type: string
      transaction_detail:
        $ref: '#/definitions/model.TransactionDetail'
      transaction_status:
        example: pending
        type: string
      transaction_type:
        example: cash
        type: string
    type: object
  model.TransactionDetail:
    properties:
      amount:
        type: number
      customer:
        $ref: '#/definitions/model.Customer'
      customer_id:
        format: uuid
        type: string
      product:
        $ref: '#/definitions/model.Product'
      product_id:
        format: uuid
        type: string
      qty:
        type: integer
      total_amount:
        type: number
      transaction:
        $ref: '#/definitions/model.Transaction'
      transaction_id:
        format: uuid
        type: string
    type: object
  model.User:
    properties:
      activated_at:
        format: date-time
        type: string
      asset:
        $ref: '#/definitions/model.Asset'
      asset_id:
        type: string
      creator_id:
        description: creator id
        format: uuid
        type: string
      email:
        type: string
      fullname:
        type: string
      is_activated:
        type: boolean
      is_owner:
        type: boolean
      is_password_system_generated:
        type: boolean
      last_login:
        format: date-time
        type: string
      mobile:
        type: string
      modifier_id:
        description: modifier id
        format: uuid
        type: string
      otp_enabled:
        type: boolean
      otp_expiration:
        format: date-time
        type: string
      password_expiration:
        format: date-time
        type: string
      password_last_change:
        format: date-time
        type: string
      reset_password_expiration:
        format: date-time
        type: string
      username:
        type: string
      verification_expiration:
        format: date-time
        type: string
    type: object
  model.UserAPI:
    properties:
      activated_at:
        format: date-time
        type: string
      asset_id:
        type: string
      email:
        type: string
      fullname:
        type: string
      is_activated:
        type: boolean
      is_owner:
        type: boolean
      is_password_system_generated:
        type: boolean
      last_login:
        format: date-time
        type: string
      mobile:
        type: string
      otp_enabled:
        type: boolean
      otp_expiration:
        format: date-time
        type: string
      password_expiration:
        format: date-time
        type: string
      password_last_change:
        format: date-time
        type: string
      reset_password_expiration:
        format: date-time
        type: string
      username:
        type: string
      verification_expiration:
        format: date-time
        type: string
    type: object
  model.VerificationAccountAPI:
    properties:
      email:
        example: john.doe@mail.com
        type: string
      verification_code:
        example: "7085"
        type: string
    required:
    - email
    - verification_code
    type: object
info:
  contact:
    email: erfanpratama321@gmail.com
    name: Irfan Pratama
  description: API Documentation
  termsOfService: https://dospecs.monstercode.net/en/guide/tnc.html
  title: User Services
  version: 1.0.0
paths:
  /:
    get:
      consumes:
      - application/json
      description: show basic response
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/lib.Response'
      summary: show basic response
      tags:
      - API
  /Customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Customer by id
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Customer by id
      tags:
      - Customer
  /account/login:
    post:
      description: Generate token
      parameters:
      - description: Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.LoginAPI'
      responses:
        "200":
          description: Logedin
          schema:
            $ref: '#/definitions/model.LoginAPI'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Generate token
      tags:
      - Account
  /account/register:
    post:
      description: Registration
      parameters:
      - description: Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.RegistrationAPI'
      responses:
        "200":
          description: registered
          schema:
            $ref: '#/definitions/lib.Response'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Registration
      tags:
      - Account
  /account/send-verify-account-code:
    post:
      description: Resend Code Verify account
      parameters:
      - description: Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SendVerificationAccountAPI'
      responses:
        "200":
          description: Account verified
          schema:
            $ref: '#/definitions/model.UserAPI'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Resend Code Verify account
      tags:
      - Account
  /account/verify-account:
    post:
      description: Verify account
      parameters:
      - description: Payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.VerificationAccountAPI'
      responses:
        "200":
          description: Account verified
          schema:
            $ref: '#/definitions/model.UserAPI'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - TokenKey: []
      summary: Verify account
      tags:
      - Account
  /brands:
    get:
      consumes:
      - application/json
      description: List of Brand
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Brand
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Brand'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Brand
      tags:
      - Brand
    post:
      consumes:
      - application/json
      description: Create new Brand
      parameters:
      - description: Brand data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.BrandAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Brand data
          schema:
            $ref: '#/definitions/model.Brand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Brand
      tags:
      - Brand
  /brands/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Brand by id
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Brand by id
      tags:
      - Brand
    get:
      consumes:
      - application/json
      description: Get a Brand by id
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Brand data
          schema:
            $ref: '#/definitions/model.Brand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Brand by id
      tags:
      - Brand
    put:
      consumes:
      - application/json
      description: Update Brand by id
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      - description: Brand data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.BrandAPI'
      produces:
      - application/json
      responses:
        "200":
          description: Brand data
          schema:
            $ref: '#/definitions/model.Brand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Brand by id
      tags:
      - Brand
  /carts:
    get:
      consumes:
      - application/json
      description: List of Cart
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Cart
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Cart'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Cart
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Create new Cart
      parameters:
      - description: Cart data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CartRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Cart data
          schema:
            $ref: '#/definitions/model.Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Cart
      tags:
      - Cart
  /carts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Cart by id
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Cart by id
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Update Cart by id
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      - description: Cart data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CartUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Cart data
          schema:
            $ref: '#/definitions/model.Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Cart by id
      tags:
      - Cart
  /categories:
    get:
      consumes:
      - application/json
      description: List of Category
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Category
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Category
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create new Category
      parameters:
      - description: Category data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CategoryAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Category data
          schema:
            $ref: '#/definitions/model.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Category
      tags:
      - Category
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Category by id
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Get a Category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category data
          schema:
            $ref: '#/definitions/model.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Category by id
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update Category by id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CategoryAPI'
      produces:
      - application/json
      responses:
        "200":
          description: Category data
          schema:
            $ref: '#/definitions/model.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Category by id
      tags:
      - Category
  /customers:
    get:
      consumes:
      - application/json
      description: List of Customer
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Customer
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Customer'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Customer
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Create new Customer
      parameters:
      - description: Customer data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CustomerAPI'
      produces:
      - application/json
      responses:
        "201":
          description: Customer data
          schema:
            $ref: '#/definitions/model.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Customer
      tags:
      - Customer
  /customers/{id}:
    get:
      consumes:
      - application/json
      description: Get a Customer by id
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Customer data
          schema:
            $ref: '#/definitions/model.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Customer by id
      tags:
      - Customer
    put:
      consumes:
      - application/json
      description: Update Customer by id
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CustomerAPI'
      produces:
      - application/json
      responses:
        "200":
          description: Customer data
          schema:
            $ref: '#/definitions/model.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Customer by id
      tags:
      - Customer
  /info.json:
    get:
      consumes:
      - application/json
      description: show info response
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/lib.Response'
      summary: show info response
      tags:
      - API
  /payments/{transaction_id}:
    post:
      consumes:
      - application/json
      description: Create Payment Transaction by Transaction id
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Payment Link Response
          schema:
            $ref: '#/definitions/model.PaymentLinkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Payment Transaction by Transaction id
      tags:
      - Payment
  /products:
    get:
      consumes:
      - application/json
      description: List of Product
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Product
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Product
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create new Product
      parameters:
      - description: Product data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product data
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Product
      tags:
      - Product
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Product by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lib.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete Product by id
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Get a Product by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product data
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a Product by id
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update Product by id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ProductAPI'
      produces:
      - application/json
      responses:
        "200":
          description: Product data
          schema:
            $ref: '#/definitions/model.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Update Product by id
      tags:
      - Product
  /transactions:
    get:
      consumes:
      - application/json
      description: List of Transaction
      parameters:
      - description: Page number start from zero
        in: query
        name: page
        type: integer
      - description: Size per page, default `0`
        in: query
        name: size
        type: integer
      - description: Sort by field, adding dash (`-`) at the beginning means descending
          and vice versa
        in: query
        name: sort
        type: string
      - description: Select specific fields with comma separated
        in: query
        name: fields
        type: string
      - description: custom filters, see [more details](https://github.com/morkid/paginate#filter-format)
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Transaction
          schema:
            allOf:
            - $ref: '#/definitions/lib.Page'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/model.Transaction'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: List of Transaction
      tags:
      - Transaction
    post:
      consumes:
      - application/json
      description: Create new Transaction
      produces:
      - application/json
      responses:
        "201":
          description: Transaction data
          schema:
            $ref: '#/definitions/model.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/lib.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/lib.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/lib.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/lib.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/lib.Response'
      security:
      - ApiKeyAuth: []
      summary: Create new Transaction
      tags:
      - Transaction
schemes:
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  TokenKey:
    in: header
    name: x-Token
    type: apiKey
swagger: "2.0"
